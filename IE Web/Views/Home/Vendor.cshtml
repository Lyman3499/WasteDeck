@model IEnumerable<IE_Web.Models.Vendor>
@{
    ViewBag.Title = "Vendor";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
<link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />
<link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css" type="text/css" />
<link href='https://api.tiles.mapbox.com/mapbox.js/v3.3.1/mapbox.css' rel='stylesheet' />


<!--Search Vendors Banner Block-->
<div class="vendor-banner">
    <div class="vendor-banner-block"></div>
    <div class="banner-text-block">
        <h1 class="text-uppercase text-bold" style="font-size:30px;font-weight:bold">Search For Eco-Friendly Vendors</h1>
    </div>
</div>
<!--Search Vendors Banner Block-->

<body>
    <!--Short Description Block-->
    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-md-12 problem-block">
                <h4>Do you want to reduce your carbon footprint? </h4>
                <ul>
                    <li>Choosing sustainable products and foods will significantly reduce carbon emissions (like buying drinks in glass bottles that can be used multiple times instead of plastic bottles).</li>
                    <li>We will help you to find retailers of eco-friendly products near you that care about our planet.</li>
                </ul>
            </div>
        </div>
    </div>
    <!--Short Description Block-->
    <!--Search Bar-->
    @using (Html.BeginForm("Vendor", "Home", FormMethod.Get))
    {
        <div class="py-3 bg-primary vendor-form" style="margin-bottom:-20px">
            <div class="container">
                <div class="row">

                    <form class="search-form col-md-12" target="iframeForm">

                        <div class="col-md-4 col-12">

                            @{
                                var value = ViewBag.category;
                                var postcode = ViewBag.postcode;
                            }

                            <h5 class="text-uppercase text-white mb-4 category-label" for="offer-types">Select Category</h5>
                            <select id="select" name="category" style="height:40px;width:200px;margin-bottom:20px">
                                <option value="" @if (value == "") { <text> selected</text> }>All</option>
                                <option value="Baby food" @if (value == "Baby food") { <text> selected</text> }>Baby food</option>
                                <option value="Bakery" @if (value == "Bakery") { <text> selected</text> }>Bakery</option>
                                <option value="Bee-products" @if (value == "Bee-products") { <text> selected</text> }>Bee products</option>
                                <option value="Cafe" @if (value == "Cafe") { <text> selected</text> }>Cafe</option>
                                <option value="Coffee" @if (value == "Coffee") { <text> selected</text> }>Coffee</option>
                                <option value="Condinments" @if (value == "Condinments") { <text> selected</text> }>Condinments</option>
                                <option value="Dairy" @if (value == "Dairy") { <text> selected</text> }>Dairy</option>
                                <option value="Deli" @if (value == "Deli") { <text> selected</text> }>Deli</option>
                                <option value="Dry products" @if (value == "Dry products") { <text> selected</text> }>Dry products</option>
                                <option value="Eggs" @if (value == "Eggs") { <text> selected</text> }>Eggs</option>
                                <option value="Fruits" @if (value == "Fruits") { <text> selected</text> }>Fruits</option>
                                <option value="Grains" @if (value == "Grains") { <text> selected</text> }>Grains</option>
                                <option value="HerbsN`Tea" @if (value == "HerbsN`Tea") { <text> selected</text> }>HerbsN`Tea</option>
                                <option value="Meat" @if (value == "Meat") { <text> selected</text> }>Meat</option>
                                <option value="Nuts" @if (value == "Nuts") { <text> selected</text> }>Nuts</option>
                                <option value="Oil" @if (value == "Oil") { <text> selected</text> }>Oil</option>
                                <option value="Pasta and Noodles" @if (value == "Pasta and Noodles") { <text> selected</text> }>Pasta and Noodles</option>
                                <option value="Sauces" @if (value == "Sauces") { <text> selected</text> }>Sauces</option>
                                <option value="Seafood" @if (value == "Seafood") { <text> selected</text> }>Seafood</option>
                                <option value="Sweets" @if (value == "Sweets") { <text> selected</text> }>Sweets</option>
                                <option value="Soy" @if (value == "Soy") { <text> selected</text> }>Soy</option>
                                <option value="Vegetables" @if (value == "Vegetables") { <text> selected</text> }>Vegetables</option>
                                <option value="Vinegar" @if (value == "Vinegar") { <text> selected</text> }>Vinegar</option>
                                <option value="Wine" @if (value == "Wine") { <text> selected</text> }>Wine</option>

                            </select>

                        </div>


                        <div class="col-md-4">
                            <h5 class="text-uppercase text-white mb-4 postcode-label">Postcode</h5>
                            <input class="postcode-field" type="text" name="postcode" placeholder="Postcode" style="height:40px;width:100%" />
                        </div>



                        <div class="col-md-4 col-12 text-center vendor-form-btn">
                            <!--<h5 class="text-uppercase text-white mb-4"><br /></h5>-->
                            <input type="submit" value="Search" class="btn btn-bg-primary font-secondary text-uppercase" />
                        </div>
                    </form>
                    <iframe id="from" style="display:none;"></iframe>
                </div>
            </div>
        </div>
    }


    <br />
    <br />


    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-md-4 col-12">
                <!--Vendor List-->
                <div>
                    <h2 class="text-center text-bold vendor-title">Vendor List</h2>
                    <div style="height:500px;overflow-y:auto;overflow-x:hidden">
                        @if (Model.Count() == 0)
                        {
                            <!--Set the search to no results-->
                            <div>
                                <h4 colspan="3" class="text-center" style="color:#FF0000">
                                    No matching vendors found
                                </h4>
                            </div>
                        }
                        else
                        {
                            <div class="vendor-block">
                                <div id='listings' class='listings'></div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <br /><br />
            <!--Map-->
            <div id="map" class="map col-sm-12 col-md-8 col-12" style="height:500px;width:100%"></div>
        </div>
    </div>

    <table style="display:none">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.postcode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.website)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.phone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.latitude)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr class="table">
                <td class="name">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td class="address">
                    @Html.DisplayFor(modelItem => item.address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.postcode)
                </td>
                <td class="category">
                    @Html.DisplayFor(modelItem => item.category)
                </td>
                <td class="website">
                    @Html.DisplayFor(modelItem => item.website)
                </td>
                <td class="phone">
                    @Html.DisplayFor(modelItem => item.phone)
                </td>
                <td class="Longitude">
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td class="latitude">
                    @Html.DisplayFor(modelItem => item.latitude)
                </td>
            </tr>
        }
    </table>
    <!--Script for Map-->
    @section Scripts{
        <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
        <script src="https://unpkg.com/es6-promise@4.2.4/dist/es6-promise.auto.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
        <!-- Geocoder plugin -->
        <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
        <script src='https://api.tiles.mapbox.com/mapbox.js/v3.3.1/mapbox.js'></script>
        <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
        <!-- Turf.js plugin -->
        <script src="~/js/turf.min.js"></script>

        <script>

            var myselect = document.getElementById("select");
            var index = myselect.selectedIndex;
            var value = myselect.options[index].value;
            $("#select").val(value);

        </script>

        <script>
            // mapbox accessToken
            mapboxgl.accessToken = 'pk.eyJ1IjoibHltYW4zNDk5IiwiYSI6ImNrMW44ZXJ0ZDA0aHgzanBoZ2djM2gydm0ifQ.lNs4k9R7vEECWf2x7y09Ww';

            //use mapbox to create a map
            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [144.96, -37.8],
                zoom: 8
            });

            //Get all the vendors information shown and put it into an Array for easy invocation
            var datalist = [];
            $(".table").each(function () {
                var vendor = $(".name", this).text().trim();
                var address = $(".address", this).text().trim();
                var category = $(".category", this).text().trim();
                var phone = $(".phone", this).text().trim();
                var website = $(".website", this).text().trim();
                var longitude = $(".Longitude", this).text().trim();
                var latitude = $(".latitude", this).text().trim();

                var data = {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [longitude, latitude]
                    },
                    properties: {
                        Title: vendor,
                        Address: address,
                        Category: category,
                        Phone: phone,
                        Website: website
                    }
                }
                datalist.push(data);
            });

            // Set geojson tamplate
            var geojson = {
                type: 'FeatureCollection',
                features: datalist
            };

            /**
            * Assign a unique id to each store. You'll use this `id`
            * later to associate each point on the map with a listing
            * in the sidebar.
            */
            geojson.features.forEach(function (vendor, i) {
                vendor.properties.id = i;
            });


            // Add geolocate control to the map for marking location of user
            map.addControl(
                new mapboxgl.GeolocateControl({
                    positionOptions: {
                        enableHighAccuracy: true
                    },
                    trackUserLocation: true
                }),
                'top-right'
            );

            // This function will use the .remove() function for sorting list
            if (!('remove' in Element.prototype)) {
                Element.prototype.remove = function () {
                    if (this.parentNode) {
                        this.parentNode.removeChild(this);
                    }
                };
            }

            // Wait until the map loads to make changes to the map.
            map.on('load', function (e) {
                /**
                 * This is where your '.addLayer()' used to be, instead
                 * add only the source without styling a layer
                */
                map.addSource("places", {
                    "type": "geojson",
                    "data": geojson
                });

                /**
                 * Create a new MapboxGeocoder instance.
                */
                var geocoder = new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl,
                    placeholder: 'Search address',
                    marker: true,
                    bbox: [140.092785, -39.081490, 153.044536, -32.543365],
                    countries: 'au'
                });


                /**
                 * Add all the things to the page:
                 * - The location listings on the side of the page
                 * - The search box (MapboxGeocoder) onto the map
                 * - The markers onto the map
                */
                buildLocationList(geojson);
                map.addControl(geocoder, 'top-left');
                addMarkers();


                /**
                 * Listen for when a geocoder result is returned. When one is returned:
                 * - Calculate distances
                 * - Sort vendors by distance
                 * - Rebuild the listings
                 * - Adjust the map camera
                 * - Open a popup for the closest vendor
                 * - Highlight the listing for the closest vendor.
                */
                geocoder.on('result', function (ev) {

                    /* Get the coordinate of the search result */
                    var searchResult = ev.result.geometry;

                    /**
                     * Calculate distances:
                     * For each vendor, use turf.disance to calculate the distance
                     * in miles between the searchResult and the vendor. Assign the
                     * calculated value to a property called `distance`.
                    */
                    var options = { units: 'miles' };
                    geojson.features.forEach(function (vendor) {
                        Object.defineProperty(vendor.properties, 'distance', {
                            value: turf.distance(searchResult, vendor.geometry, options),
                            writable: true,
                            enumerable: true,
                            configurable: true
                        });
                    });

                    /**
                     * Sort vendors by distance from closest to the `searchResult`
                     * to furthest.
                    */
                    geojson.features.sort(function (a, b) {
                        if (a.properties.distance > b.properties.distance) {
                            return 1;
                        }
                        if (a.properties.distance < b.properties.distance) {
                            return -1;
                        }
                        return 0; // a must be equal to b
                    });

                    /**
                     * Rebuild the listings:
                     * Remove the existing listings and build the location
                     * list again using the newly sorted vendors.
                    */
                    var listings = document.getElementById('listings');
                    while (listings.firstChild) {
                        listings.removeChild(listings.firstChild);
                    }
                    buildLocationList(geojson);

                    /* Open a popup for the closest vendor. */
                    createPopUp(geojson.features[0]);

                    /** Highlight the listing for the closest vendor. */
                    var activeListing = document.getElementById('listing-' + geojson.features[0].properties.id);
                    activeListing.classList.add('active');

                    /**
                     * Adjust the map camera:
                     * Get a bbox that contains both the geocoder result and
                     * the closest vendor. Fit the bounds to that bbox.
                    */
                    var bbox = getBbox(geojson, 0, searchResult);
                    map.fitBounds(bbox, {
                        padding: 100
                    });
                });
            });

            /**
            * Using the coordinates (lng, lat) for
            * (1) the search result and
            * (2) the closest vendors
            * construct a bbox that will contain both points
            */
            function getBbox(sortedVendors, vendorIdentifier, searchResult) {
                var lats = [sortedVendors.features[vendorIdentifier].geometry.coordinates[1], searchResult.coordinates[1]]
                var lons = [sortedVendors.features[vendorIdentifier].geometry.coordinates[0], searchResult.coordinates[0]]
                var sortedLons = lons.sort(function (a, b) {
                    if (a > b) { return 1; }
                    if (a.distance < b.distance) { return -1; }
                    return 0;
                });
                var sortedLats = lats.sort(function (a, b) {
                    if (a > b) { return 1; }
                    if (a.distance < b.distance) { return -1; }
                    return 0;
                });
                return [
                    [sortedLons[0], sortedLats[0]],
                    [sortedLons[1], sortedLats[1]]
                ];
            }

            /**
             * Add a marker to the map for every vendor listing.
            **/
            function addMarkers() {
                /* For each feature in the GeoJSON object above: */
                geojson.features.forEach(function (marker) {
                    /* Create a div element for the marker. */
                    var el = document.createElement('div');
                    /* Assign a unique `id` to the marker. */
                    el.id = "marker-" + marker.properties.id;
                    /* Assign the `marker` class to each marker for styling. */
                    el.className = 'marker';

                    /**
                     * Create a marker using the div element
                     * defined above and add it to the map.
                    **/
                    new mapboxgl.Marker(el, { offset: [0, -23] })
                        .setLngLat(marker.geometry.coordinates)
                        .addTo(map);

                    /**
                     * Listen to the element and when it is clicked, do three things:
                     * 1. Fly to the point
                     * 2. Close all other popups and display popup for clicked vendor
                     * 3. Highlight listing in sidebar (and remove highlight for all other listings)
                    **/
                    el.addEventListener('click', function (e) {
                        flyToVendor(marker);
                        createPopUp(marker);
                        var activeItem = document.getElementsByClassName('active');
                        e.stopPropagation();
                        if (activeItem[0]) {
                            activeItem[0].classList.remove('active');
                        }
                        var listing = document.getElementById('listing-' + marker.properties.id);
                        listing.classList.add('active');
                    });
                });
            }

            /**
             * Add a listing for each vendor to the sidebar.
            **/
            function buildLocationList(data) {



                data.features.forEach(function (vendor, i) {
                    /**
                     * Create a shortcut for `vendor.properties`,
                     * which will be used several times below.
                    **/
                    var prop = vendor.properties;

                    /* Add a new listing section to the sidebar. */
                    var listings = document.getElementById('listings');
                    var listing = listings.appendChild(document.createElement('div'));
                    /* Assign a unique `id` to the listing. */
                    listing.id = "listing-" + prop.id;
                    /* Assign the `item` class to each listing for styling. */
                    listing.className = 'item';

                    /* Add the link to the individual listing created above. */
                    var link = listing.appendChild(document.createElement('a'));
                    link.href = '#map';
                    link.className = 'title';
                    link.id = "link-" + prop.id;
                    link.innerHTML = prop.Title;

                    /* Add details to the individual listing. */
                    var schemaAddress = listing.appendChild(document.createElement('div'));
                    var detailsAddress = listing.appendChild(document.createElement('div'));
                    var schemaCategory = listing.appendChild(document.createElement('div'));
                    var detailsCategory = listing.appendChild(document.createElement('div'));
                    var schemaPhone = listing.appendChild(document.createElement('div'));
                    var detailsPhone = listing.appendChild(document.createElement('div'));

                    schemaAddress.style.fontWeight = 'bold';
                    schemaPhone.style.fontWeight = 'bold';
                    schemaCategory.style.fontWeight = 'bold';

                    schemaAddress.innerHTML = 'Address: ' + '<br/>';
                    detailsAddress.innerHTML = prop.Address;
                    schemaCategory.innerHTML = 'Category: ' + '<br/>';
                    detailsCategory.innerHTML = prop.Category;
                    schemaPhone.innerHTML = 'Phone: ' + '<br/>';
                    detailsPhone.innerHTML = prop.Phone;

                    if (prop.Website != "no details" && prop.Website != null) {
                        var schemaWeb = listing.appendChild(document.createElement('div'));

                        schemaWeb.style.fontWeight = 'bold';
                        schemaWeb.innerHTML += 'Website: ' + '<br/>';

                        var web = listing.appendChild(document.createElement('a'));
                        web.href = 'https://' + prop.Website;
                        web.target = "_blank"
                        web.innerHTML += prop.Website;
                        web.style.color = 'blue';
                    }


                    if (prop.distance) {
                        var distance = listing.appendChild(document.createElement('div'));
                        var roundedDistance = Math.round(prop.distance * 100) / 100;
                        distance.innerHTML += '<p><strong>' + roundedDistance + ' miles away</strong></p>';
                    }

                    /**
                     * Listen to the element and when it is clicked, do four things:
                     * 1. Update the `currentFeature` to the vendor associated with the clicked link
                     * 2. Fly to the point
                     * 3. Close all other popups and display popup for clicked vendor
                     * 4. Highlight listing in sidebar (and remove highlight for all other listings)
                    **/
                    link.addEventListener('click', function (e) {
                        for (var i = 0; i < data.features.length; i++) {
                            if (this.id === "link-" + data.features[i].properties.id) {
                                var clickedListing = data.features[i];
                                flyToVendor(clickedListing);
                                createPopUp(clickedListing);
                            }
                        }
                        var activeItem = document.getElementsByClassName('active');
                        if (activeItem[0]) {
                            activeItem[0].classList.remove('active');
                        }
                        this.parentNode.classList.add('active');
                    });
                });

            }

            /**
             * Use Mapbox GL JS's `flyTo` to move the camera smoothly
             * a given center point.
            **/
            function flyToVendor(currentFeature) {
                map.flyTo({
                    center: currentFeature.geometry.coordinates,
                    zoom: 13
                });
            }

            /**
             * Create a Mapbox GL JS `Popup`.
            **/
            function createPopUp(currentFeature) {
                var popUps = document.getElementsByClassName('mapboxgl-popup');
                if (popUps[0]) popUps[0].remove();

                var popup = new mapboxgl.Popup({ closeOnClick: false })
                    .setLngLat(currentFeature.geometry.coordinates)
                    .setHTML('<h4>' + currentFeature.properties.Title + '</h4>' +
                        '<p>' + currentFeature.properties.Address + '</p>')
                    .addTo(map);
            }

        </script>
    }
</body>


