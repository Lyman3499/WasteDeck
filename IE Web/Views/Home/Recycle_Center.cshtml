@model IEnumerable<IE_Web.Models.RecycleCenter>
@{
    ViewBag.Title = "recycleCenter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
<link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />
<link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css" type="text/css" />
<link href='https://api.tiles.mapbox.com/mapbox.js/v3.3.1/mapbox.css' rel='stylesheet' />


<!--Recycle Centre Banner Block-->
<div class="banner">
    <div class="recycle-centre-banner-block"></div>
    <div class="banner-text-block">
        <h1 class="banner_text_color" style="font-size:30px;font-weight:bold">Search For Recycling Centers</h1>
    </div>
</div>
<!--Recycle Centre Banner Block-->

<body>
    <div class="row">
        <div class="col-sm-12 col-md-12 problem-block" style="padding-left:60px">
            <h4>Do you want to reduce your carbon footprint? </h4>
            <p>
                Start from switching to eco-friendly and organic food.
                We will help you to find retailers near you that care about our planet.
            </p>
        </div>
    </div>


    <!--Search Bar-->
    @using (Html.BeginForm("Recycle_Center", "Home", FormMethod.Get))
    {
        <div class="py-3 bg-primary" style="margin-bottom:-20px">
            <div class="container">
                <div class="row">

                    <form class="search-form col-md-12">

                        <div class="col-md-4 col-12">
                            <h5 class="text-uppercase text-white mb-4" for="offer-types">Select Type</h5>
                            <select name="type" style="height:40px;width:200px;margin-bottom:30px">
                                <option value="">All</option>
                                <option value="Landfill">Landfill</option>
                                <option value="Multi-Purpose">Multi-Purpose</option>
                                <option value="Reprocessing">Reprocessing</option>
                                <option value="Transfer Station">Transfer Station</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <h5 class="text-uppercase text-white mb-4">Postcode</h5>
                            <input type="text" name="postcode" placeholder="Postcode" style="height:40px;width:300px" />
                        </div>

                        <div class="col-md-4 col-12 text-center">
                            <h5 class="text-uppercase text-white mb-4"><br /></h5>
                            <input type="submit" value="Search" class="btn btn-bg-primary font-secondary text-uppercase" />
                        </div>
                    </form>

                </div>
            </div>
        </div>
    }


    <br />
    <br />


    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-md-4 col-12">

                <!--Recycle Center List-->
                <div>
                    <div style="height:500px;overflow-y:auto;overflow-x:hidden">
                        <h2 class="text-center text-bold recycle-title">Recycling Centres List</h2>

                        @if (Model.Count() == 0)
                        {
                            <!--Set the search to no results-->
                            <div>
                                <h4 colspan="3" class="text-center" style="color:#FF0000">
                                    No matches found
                                </h4>
                            </div>
                        }
                        else
                        {
                            <div class="recycleCenter-block">
                                <div id='listings' class='listings'></div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <br /><br />
            <!--Map-->
            <div id="map" class="map col-sm-12 col-md-8 col-12" style="height:500px;width:100%"></div>


        </div>

    </div>



    <table style="display:none">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.postcode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.latitude)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr class="table">
                <td class="name">
                    @Html.DisplayFor(modelItem => item.name)
                </td>
                <td class="address">
                    @Html.DisplayFor(modelItem => item.address)
                </td>
                <td class="suburb">
                    @Html.DisplayFor(modelItem => item.suburb)
                </td>
                <td class="postcode">
                    @Html.DisplayFor(modelItem => item.postcode)
                </td>
                <td class="type">
                    @Html.DisplayFor(modelItem => item.type)
                </td>
                <td class="Longitude">
                    @Html.DisplayFor(modelItem => item.longitude)
                </td>
                <td class="latitude">
                    @Html.DisplayFor(modelItem => item.latitude)
                </td>
            </tr>
        }
    </table>


    <!--Script for Map-->
    @section Scripts{
        <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
        <script src="https://unpkg.com/es6-promise@4.2.4/dist/es6-promise.auto.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
        <!-- Geocoder plugin -->
        <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
        <script src='https://api.tiles.mapbox.com/mapbox.js/v3.3.1/mapbox.js'></script>
        <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
        <!-- Turf.js plugin -->
        <script src="~/js/turf.min.js"></script>

        <script>
            // mapbox accessToken
            mapboxgl.accessToken = 'pk.eyJ1IjoibHltYW4zNDk5IiwiYSI6ImNrMW44ZXJ0ZDA0aHgzanBoZ2djM2gydm0ifQ.lNs4k9R7vEECWf2x7y09Ww';

            //use mapbox to create a map
            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [144.96, -37.8],
                zoom: 8
            });

            //Get all the recycleCenters information shown and put it into an Array for easy invocation
            var datalist = [];
            $(".table").each(function () {
                var recycleCenter = $(".name", this).text().trim();
                var address = $(".address", this).text().trim();
                var suburb = $(".suburb", this).text().trim();
                var postcode = $(".postcode", this).text().trim();
                postcode = parseFloat(postcode).toFixed(0);
                var type = $(".type", this).text().trim();
                var longitude = $(".Longitude", this).text().trim();
                var latitude = $(".latitude", this).text().trim();

                var data = {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [longitude, latitude]
                    },
                    properties: {
                        Title: recycleCenter,
                        Type: type,
                        Address: address + ', ' + suburb + ', VIC, ' + postcode
                    }
                }
                datalist.push(data);
            });

            // Set geojson tamplate
            var geojson = {
                type: 'FeatureCollection',
                features: datalist
            };

            /**
            * Assign a unique id to each store. You'll use this `id`
            * later to associate each point on the map with a listing
            * in the sidebar.
            */
            geojson.features.forEach(function (recycleCenter, i) {
                recycleCenter.properties.id = i;
            });


            // Add geolocate control to the map for marking location of user
            map.addControl(
                new mapboxgl.GeolocateControl({
                    positionOptions: {
                        enableHighAccuracy: true
                    },
                    trackUserLocation: true
                }),
                'top-right'
            );

            // This function will use the .remove() function for sorting list
            if (!('remove' in Element.prototype)) {
                Element.prototype.remove = function () {
                    if (this.parentNode) {
                        this.parentNode.removeChild(this);
                    }
                };
            }

            // Wait until the map loads to make changes to the map.
            map.on('load', function (e) {
                /**
                 * This is where your '.addLayer()' used to be, instead
                 * add only the source without styling a layer
                */
                map.addSource("places", {
                    "type": "geojson",
                    "data": geojson
                });

                /**
                 * Create a new MapboxGeocoder instance.
                */
                var geocoder = new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl,
                    placeholder: 'Search address',
                    marker: true,
                    bbox: [140.092785, -39.081490, 153.044536, -32.543365],
                    countries: 'au'
                });


                /**
                 * Add all the things to the page:
                 * - The location listings on the side of the page
                 * - The search box (MapboxGeocoder) onto the map
                 * - The markers onto the map
                */
                buildLocationList(geojson);
                map.addControl(geocoder, 'top-left');
                addMarkers();


                /**
                 * Listen for when a geocoder result is returned. When one is returned:
                 * - Calculate distances
                 * - Sort recycleCenters by distance
                 * - Rebuild the listings
                 * - Adjust the map camera
                 * - Open a popup for the closest recycleCenter
                 * - Highlight the listing for the closest recycleCenter.
                */
                geocoder.on('result', function (ev) {

                    /* Get the coordinate of the search result */
                    var searchResult = ev.result.geometry;

                    /**
                     * Calculate distances:
                     * For each recycleCenter, use turf.disance to calculate the distance
                     * in miles between the searchResult and the recycleCenter. Assign the
                     * calculated value to a property called `distance`.
                    */
                    var options = { units: 'miles' };
                    geojson.features.forEach(function (recycleCenter) {
                        Object.defineProperty(recycleCenter.properties, 'distance', {
                            value: turf.distance(searchResult, recycleCenter.geometry, options),
                            writable: true,
                            enumerable: true,
                            configurable: true
                        });
                    });

                    /**
                     * Sort recycleCenters by distance from closest to the `searchResult`
                     * to furthest.
                    */
                    geojson.features.sort(function (a, b) {
                        if (a.properties.distance > b.properties.distance) {
                            return 1;
                        }
                        if (a.properties.distance < b.properties.distance) {
                            return -1;
                        }
                        return 0; // a must be equal to b
                    });

                    /**
                     * Rebuild the listings:
                     * Remove the existing listings and build the location
                     * list again using the newly sorted recycleCenters.
                    */
                    var listings = document.getElementById('listings');
                    while (listings.firstChild) {
                        listings.removeChild(listings.firstChild);
                    }
                    buildLocationList(geojson);

                    /* Open a popup for the closest recycleCenter. */
                    createPopUp(geojson.features[0]);

                    /** Highlight the listing for the closest recycleCenter. */
                    var activeListing = document.getElementById('listing-' + geojson.features[0].properties.id);
                    activeListing.classList.add('active');

                    /**
                     * Adjust the map camera:
                     * Get a bbox that contains both the geocoder result and
                     * the closest recycleCenter. Fit the bounds to that bbox.
                    */
                    var bbox = getBbox(geojson, 0, searchResult);
                    map.fitBounds(bbox, {
                        padding: 100
                    });
                });
            });

            /**
            * Using the coordinates (lng, lat) for
            * (1) the search result and
            * (2) the closest recycleCenters
            * construct a bbox that will contain both points
            */
            function getBbox(sortedrecycleCenters, recycleCenterIdentifier, searchResult) {
                var lats = [sortedrecycleCenters.features[recycleCenterIdentifier].geometry.coordinates[1], searchResult.coordinates[1]]
                var lons = [sortedrecycleCenters.features[recycleCenterIdentifier].geometry.coordinates[0], searchResult.coordinates[0]]
                var sortedLons = lons.sort(function (a, b) {
                    if (a > b) { return 1; }
                    if (a.distance < b.distance) { return -1; }
                    return 0;
                });
                var sortedLats = lats.sort(function (a, b) {
                    if (a > b) { return 1; }
                    if (a.distance < b.distance) { return -1; }
                    return 0;
                });
                return [
                    [sortedLons[0], sortedLats[0]],
                    [sortedLons[1], sortedLats[1]]
                ];
            }

            /**
             * Add a marker to the map for every recycleCenter listing.
            **/
            function addMarkers() {
                /* For each feature in the GeoJSON object above: */
                geojson.features.forEach(function (marker) {
                    /* Create a div element for the marker. */
                    var el = document.createElement('div');
                    /* Assign a unique `id` to the marker. */
                    el.id = "marker-" + marker.properties.id;
                    /* Assign the `marker` class to each marker for styling. */
                    el.className = 'marker';

                    /**
                     * Create a marker using the div element
                     * defined above and add it to the map.
                    **/
                    new mapboxgl.Marker(el, { offset: [0, -23] })
                        .setLngLat(marker.geometry.coordinates)
                        .addTo(map);

                    /**
                     * Listen to the element and when it is clicked, do three things:
                     * 1. Fly to the point
                     * 2. Close all other popups and display popup for clicked recycleCenter
                     * 3. Highlight listing in sidebar (and remove highlight for all other listings)
                    **/
                    el.addEventListener('click', function (e) {
                        flyTorecycleCenter(marker);
                        createPopUp(marker);
                        var activeItem = document.getElementsByClassName('active');
                        e.stopPropagation();
                        if (activeItem[0]) {
                            activeItem[0].classList.remove('active');
                        }
                        var listing = document.getElementById('listing-' + marker.properties.id);
                        listing.classList.add('active');
                    });
                });
            }

            /**
             * Add a listing for each recycleCenter to the sidebar.
            **/
            function buildLocationList(data) {



                data.features.forEach(function (recycleCenter, i) {
                    /**
                     * Create a shortcut for `recycleCenter.properties`,
                     * which will be used several times below.
                    **/
                    var prop = recycleCenter.properties;

                    /* Add a new listing section to the sidebar. */
                    var listings = document.getElementById('listings');
                    var listing = listings.appendChild(document.createElement('div'));
                    /* Assign a unique `id` to the listing. */
                    listing.id = "listing-" + prop.id;
                    /* Assign the `item` class to each listing for styling. */
                    listing.className = 'item';

                    /* Add the link to the individual listing created above. */
                    var link = listing.appendChild(document.createElement('a'));
                    link.href = '#map';
                    link.className = 'title';
                    link.id = "link-" + prop.id;
                    link.innerHTML = prop.Title;

                    /* Add details to the individual listing. */
                    var schemaAddress = listing.appendChild(document.createElement('div'));
                    var detailsAddress = listing.appendChild(document.createElement('div'));
                    var schemaType = listing.appendChild(document.createElement('div'));
                    var detailsType = listing.appendChild(document.createElement('div'));

                    schemaAddress.style.fontWeight = 'bold';
                    schemaType.style.fontWeight = 'bold';


                    schemaAddress.innerHTML = 'Address: ' + '<br/>';
                    detailsAddress.innerHTML = prop.Address;
                    schemaType.innerHTML = 'Type: ' + '<br/>';
                    detailsType.innerHTML = prop.Type;

                    if (prop.distance) {
                        var distance = listing.appendChild(document.createElement('div'));
                        var roundedDistance = Math.round(prop.distance * 100) / 100;
                        distance.innerHTML += '<p><strong>' + roundedDistance + ' miles away</strong></p>';
                    }

                    /**
                     * Listen to the element and when it is clicked, do four things:
                     * 1. Update the `currentFeature` to the recycleCenter associated with the clicked link
                     * 2. Fly to the point
                     * 3. Close all other popups and display popup for clicked recycleCenter
                     * 4. Highlight listing in sidebar (and remove highlight for all other listings)
                    **/
                    link.addEventListener('click', function (e) {
                        for (var i = 0; i < data.features.length; i++) {
                            if (this.id === "link-" + data.features[i].properties.id) {
                                var clickedListing = data.features[i];
                                flyTorecycleCenter(clickedListing);
                                createPopUp(clickedListing);
                            }
                        }
                        var activeItem = document.getElementsByClassName('active');
                        if (activeItem[0]) {
                            activeItem[0].classList.remove('active');
                        }
                        this.parentNode.classList.add('active');
                    });
                });

            }

            /**
             * Use Mapbox GL JS's `flyTo` to move the camera smoothly
             * a given center point.
            **/
            function flyTorecycleCenter(currentFeature) {
                map.flyTo({
                    center: currentFeature.geometry.coordinates,
                    zoom: 13
                });
            }

            /**
             * Create a Mapbox GL JS `Popup`.
            **/
            function createPopUp(currentFeature) {
                var popUps = document.getElementsByClassName('mapboxgl-popup');
                if (popUps[0]) popUps[0].remove();

                var popup = new mapboxgl.Popup({ closeOnClick: false })
                    .setLngLat(currentFeature.geometry.coordinates)
                    .setHTML('<h4>' + currentFeature.properties.Title + '</h4>' +
                        '<p>' + currentFeature.properties.Address + '</p>')
                    .addTo(map);
            }

        </script>
    }

</body>


